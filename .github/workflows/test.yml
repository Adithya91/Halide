name: Build+Test
on:
  pull_request:
    types: [opened, synchronize, reopened, edited, review_requested]

jobs:
  test:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}

    strategy:
      fail-fast: false  # Keep running other jobs even if one fails
      matrix:
        config:
        # Ubuntu (x86-64) builds
        # - {
        #     name: "Ubuntu g++ llvm8 cmake_shared",
        #     build_tool: "cmake_shared",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 8,
        #     os: ubuntu-18.04,
        #   }
        # - {
        #     name: "Ubuntu g++ llvm8 cmake_static",
        #     build_tool: "cmake_static",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 8,
        #     os: ubuntu-18.04,
        #   }
        # - {
        #     name: "Ubuntu g++ llvm8 make",
        #     build_tool: "make",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 8,
        #     os: ubuntu-18.04,
        #   }
        # - {
        #     name: "Ubuntu g++ llvm9 cmake_shared",
        #     build_tool: "cmake_shared",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 9,
        #     os: ubuntu-18.04,
        #   }
        # - {
        #     name: "Ubuntu g++ llvm9 cmake_static",
        #     build_tool: "cmake_static",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 9,
        #     os: ubuntu-18.04,
        #   }
        # - {
        #     name: "Ubuntu g++ llvm9 make",
        #     build_tool: "make",
        #     cc: "gcc",
        #     cxx: "g++",
        #     llvm_version: 9,
        #     os: ubuntu-18.04,
        #   }

        # OSX builds
        - {
            name: "OSX llvm9 cmake_shared",
            build_tool: "cmake_shared",
            cc: "clang",
            cxx: "clang++",
            llvm_version: 9,
            os: macos-latest,
          }

        # - {
        #     name: "OSX llvm9 make",
        #     build_tool: "make",
        #     cc: "clang",
        #     cxx: "clang++",
        #     llvm_version: 9,
        #     os: macos-latest,
        #   }

        - {
            name: "MSVC llvm9 cmake_shared",
            build_tool: "cmake_shared",
            cc: "cl",
            cxx: "cl",
            llvm_version: 9,
            os: windows-latest,
            cmake_gen: "Visual Studio 16",
            cmake_arch: "x64",
            cmake_toolset: "host=x64",
          }

        # - {
        #     name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
        #     os: windows-latest,
        #     build_type: "Release", cc: "gcc", cxx: "g++"
        #   }

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'halide'

    - name: Configure Ubuntu
      if: startsWith(matrix.config.os, 'ubuntu')
      run: |
        sudo apt-get update

        # The standard Bionic install has gcc 7.4, which is known to be
        # buggy with LLVM. Use gcc 8 instead.
        # sudo apt-get install gcc-8 g++-8
        # sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        # sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100

        # Install OpenGL
        # TODO(srj): OpenGL is only needed to build the opengl tests (which we don't even run)...
        sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev

        # Install libpng
        sudo apt-get -y --force-yes install libpng-dev

        # Install doxygen
        sudo apt-get -y --force-yes --no-install-recommends install doxygen


    - name: Configure OSX
      if: startsWith(matrix.config.os, 'macos')
      run: |
        # Install libpng, jpeg, doxygen
        brew install libpng jpeg doxygen

        # Don't install LLVM via brew: it can conflict with the existing LLVM
        # installation in OSX and cause unhappiness. We'll handle it specially below.

    - name: Configure Windows
      if: startsWith(matrix.config.os, 'windows')
      shell: bash
      run: |
        # Install libpng, jpeg, doxygen
        # choco install libpng -- TBD, not on choco?
        # choco install libjpeg-turbo
        # choco install doxygen.install
        choco install wget

    # - name: Configure Env Vars (Windows)
    #   if: startsWith(matrix.config.os, 'windows')
    #   shell: powershell
    #   run: |
    #     # PowerShell script to set the MSVC env vars globally for all the steps in our job.
    #     # Adapted from https://github.com/microsoft/vswhere/wiki/Start-Developer-Command-Prompt
    #     # (No, I don't know PowerShell; this is heavily cargo-culted.)
    #     $arch = "x64"
    #     $hostArch = "x64"
    #     $vswherePath = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
    #     $vsInstallationPath = & "$vswherePath" -latest -property installationPath
    #     $vsDevCmdPath = "`"$vsInstallationPath\Common7\Tools\VsDevCmd.bat`""
    #     $command = "$vsDevCmdPath -no_logo -arch=$arch -host_arch=$hostArch"

    #     & "${env:COMSPEC}" /s /c "$command && set" | ForEach-Object {
    #       $name, $value = $_ -split '=', 2
    #       Write-Output "::set-env name=$name::$value"
    #     }

    - name: Configure Env Vars
      shell: bash
      run: |
        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}
        _TEMP_RAW="${{runner.temp}}"
        _TEMP=${_TEMP_RAW//\\//}

        # This is the trick GitHub Actions uses to allow us to set env vars across all job steps
        echo ::set-env name=CC::"${{matrix.config.cc}}"
        echo ::set-env name=CXX::"${{matrix.config.cxx}}"
        echo ::set-env name=LLVM_DIR::"${_ROOT}/llvm"
        echo ::set-env name=LLVM_CONFIG::"${_ROOT}/llvm/bin/llvm-config"
        echo ::set-env name=HALIDE_DIR::"${_ROOT}/halide"
        echo ::set-env name=HALIDE_BUILD_DIR::"${_ROOT}/halide_build"
        echo ::set-env name=HALIDE_TEMP_DIR::"${_TEMP}"
        echo ::set-env name=TEST_TMPDIR::"${_TEMP}"
        echo ::set-env name=PARALLEL_JOBS::"$(expr $(nproc) + 2)"

    - name: Download LLVM (Linux)
      if: startsWith(matrix.config.os, 'ubuntu')
      shell: bash
      run: |
        LLVM_URL="https://releases.llvm.org/${{matrix.config.llvm_version}}.0.0/clang+llvm-${{matrix.config.llvm_version}}.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
        wget ${LLVM_URL} -O ${HALIDE_TEMP_DIR}/llvm-project.tar.xz
        mkdir ${LLVM_DIR}
        tar xvf ${HALIDE_TEMP_DIR}/llvm-project.tar.xz -C ${LLVM_DIR} --strip-components=1

    - name: Download LLVM (MacOS)
      if: startsWith(matrix.config.os, 'macos')
      shell: bash
      run: |
        LLVM_URL="https://releases.llvm.org/${{matrix.config.llvm_version}}.0.0/clang+llvm-${{matrix.config.llvm_version}}.0.0-x86_64-darwin-apple.tar.xz"
        wget ${LLVM_URL} -O ${HALIDE_TEMP_DIR}/llvm-project.tar.xz
        mkdir ${LLVM_DIR}
        tar xvf ${HALIDE_TEMP_DIR}/llvm-project.tar.xz -C ${LLVM_DIR} --strip-components=1

    # Note 1: the Windows VMs run as admin with UAC disabled; otherwise, this wouldn't work
    # Note 2: the LLVM installer hangs when run from bash, so this step uses 'cmd'
    - name: Download LLVM (Windows)
      if: startsWith(matrix.config.os, 'windows')
      shell: cmd
      run: |
        wget "https://releases.llvm.org/${{matrix.config.llvm_version}}.0.0/LLVM-${{matrix.config.llvm_version}}.0.0-win64.exe" -O %HALIDE_TEMP_DIR%/llvm.exe
        %HALIDE_TEMP_DIR%/llvm.exe /S /D%LLVM_DIR%

    - name: Configure Halide (Make)
      if: startsWith(matrix.config.build_tool, 'make')
      shell: bash
      run: |
        # Configure Make
        mkdir ${HALIDE_BUILD_DIR}

    - name: Configure Halide (CMake)
      if: startsWith(matrix.config.build_tool, 'cmake')
      shell: bash
      run: |
        # Configure CMake
        mkdir ${HALIDE_BUILD_DIR}

        CMAKE_GEN="${{matrix.config.cmake_gen}}"
        CMAKE_GEN=${CMAKE_GEN:-"Unix Makefiles"}

        CMAKE_ARCH="${{matrix.config.cmake_arch}}"

        CMAKE_TOOLSET="${{matrix.config.cmake_toolset}}"

        case "${{matrix.config.build_tool}}" in
         cmake_shared) HALIDE_SHARED_LIBRARY=ON  ;;
         cmake_static) HALIDE_SHARED_LIBRARY=OFF ;;
        esac

        # echo cmake \
        #   -DCMAKE_BUILD_TYPE=Release \
        #   -DLLVM_DIR="${LLVM_DIR}/lib/cmake/llvm/" \
        #   -DCMAKE_MODULE_PATH="${LLVM_DIR}/lib/cmake/llvm/" \
        #   -DHALIDE_REQUIRE_LLVM_VERSION=${{matrix.config.llvm_version}}0 \
        #   -DHALIDE_SHARED_LIBRARY=${HALIDE_SHARED_LIBRARY} \
        #   -G "${CMAKE_GEN}" \
        #   -A "${CMAKE_ARCH}" \
        #   -T "${CMAKE_TOOLSET}" \
        #   -S "${HALIDE_DIR}" \
        #   -B "${HALIDE_BUILD_DIR}"

          # -D CMAKE_MODULE_PATH="${LLVM_DIR}/lib/cmake/llvm/" \
          # -D CMAKE_PREFIX_PATH="${LLVM_DIR}/lib/cmake/llvm/" \

        set -eux
        cmake \
        --debug-output --check-system-vars \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_DIR="${LLVM_DIR}/lib/cmake/llvm/" \
          -D HALIDE_REQUIRE_LLVM_VERSION=${{matrix.config.llvm_version}}0 \
          -D HALIDE_SHARED_LIBRARY=${HALIDE_SHARED_LIBRARY} \
          -G "${CMAKE_GEN}" \
          -A "${CMAKE_ARCH}" \
          -T "${CMAKE_TOOLSET}" \
          -S "${HALIDE_DIR}" \
          -B "${HALIDE_BUILD_DIR}"

    - name: Build Halide (Make)
      shell: bash
      run: |
        # Build Halide
        cd ${HALIDE_BUILD_DIR}
        make -f ${HALIDE_DIR}/Makefile -j ${PARALLEL_JOBS} distrib build_tests test_internal

    - name: Build Halide (CMake)
      shell: bash
      run: |
        # Build Halide
        cd ${HALIDE_BUILD_DIR}
        cmake --build ${HALIDE_BUILD_DIR} -j ${PARALLEL_JOBS} --target all
        # cmake --build ${HALIDE_BUILD_DIR} -j ${PARALLEL_JOBS} --target package  # TODO?

    - name: Run Tests (Make)
      shell: bash
      run: |
        # Test Halide
        cd ${HALIDE_BUILD_DIR}
        make -f ${HALIDE_DIR}/Makefile -j ${PARALLEL_JOBS} run_tests

    - name: Run Tests (CMake)
      shell: bash
      run: |
        # Test Halide
        TEST_GROUPS_BROKEN="opengl|auto_schedule"
        TEST_GROUPS_SERIAL="performance"

        cd ${HALIDE_BUILD_DIR}

        # Parallel
        ctest \
          -j ${PARALLEL_JOBS} \
          -LE "${TEST_GROUPS_BROKEN}|${TEST_GROUPS_SERIAL}" \
          --output-on-failure

        # Serial
        ctest \
          -L "${TEST_GROUPS_SERIAL}" \
          --output-on-failure

