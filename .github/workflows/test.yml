# TODO:
#  cmake_static is generally broken.
#  test_auto_schedule is flaky.

name: Build+Test
on:
  # TODO: not sure if this is the proper set of events/activity-types we want
  pull_request:
    types: [opened, synchronize, reopened, edited, review_requested]

jobs:
  test_halide:
    name: ${{matrix.arch}}-${{matrix.bits}}-${{matrix.halide_os}} llvm-${{matrix.llvm_version}} (${{matrix.build_tool}})
    runs-on: ${{matrix.os}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
      LD: ld

    strategy:
      fail-fast: false  # Keep running other jobs even if one fails
      matrix:
        # TODO: this is probably overkill; we probably don't need to build the full
        # matrix (and since we are limited to 8 concurrent tests, it would be
        # useful to prune this a bit).
        arch: [x86]
        bits: [32]
        os: [ubuntu-18.04, macos-latest]
        llvm_version: [8]
        build_tool: [make]
        # bits: [32, 64]
        # os: [windows-latest, ubuntu-18.04, macos-latest]
        # llvm_version: [8, 9, 10, trunk]
        # build_tool: [make, cmake_shared]
        include:
          - llvm_version: 8
            llvm_branch: release/8.x
          - llvm_version: 9
            llvm_branch: release/9.x
          - llvm_version: 10
            llvm_branch: release/10.x
          - llvm_version: trunk
            llvm_branch: master

          - os: macos-latest
            cc: clang
            cxx: clang++
            halide_os: osx

          - os: ubuntu-18.04
            cc: gcc
            cxx: g++
            halide_os: linux

          - os: windows-latest
            cc: cl.exe
            cxx: cl.exe
            halide_os: windows

          - build_tool: cmake_shared
            shared_library: ON
          - build_tool: cmake_static
            shared_library: OFF

        exclude:
          # Don't attempt 32-bit builds for macos
          - os: macos-latest
            bits: 32
          # Don't use make on windows
          - os: windows-latest
            build_tool: make

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'halide'

    - name: Configure Python (64-bit)
      if: matrix.bits == 64
      uses: actions/setup-python@v1
      with:
        python-version: '3.x' # Any 3.x is OK
        architecture: 'x64' # N.B.: 'x86' is only available for Windows (Ubuntu is special-cased below)

    - name: Configure Ubuntu-32
      if: startsWith(matrix.os, 'ubuntu') && matrix.bits == 32
      shell: bash
      run: |
        set -eux

        # Remove every python2 and python3 package we can find, to be sure that we don't use the wrong one later
        sudo apt update
        sudo apt remove "^python.*"
        sudo apt autoremove

        apt list --installed | grep python3

        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib lib32z1-dev
        sudo apt-get install libjpeg-dev:i386 libpng-dev:i386
        sudo apt-get install python3-minimal:i386 python3.6:i386 python3-pip
        # dh-python:i386 python3-distutils:i386 python3-dev:i386

        echo ::set-env name=CC::"${CC} -m32 "
        echo ::set-env name=CXX::"${CXX} -m32 "
        echo ::set-env name=LD::"${LD} -melf_i386 "

    - name: Configure Ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update

        # Install OpenGL
        # TODO(srj): OpenGL is only needed to build the opengl tests (which we don't even run)...
        sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev

        sudo apt-get install libjpeg-dev libpng-dev
        sudo apt-get --no-install-recommends install doxygen

    - name: Configure OSX
      if: startsWith(matrix.os, 'macos')
      shell: bash
      run: |
        # coreutils is for gtimeout
        brew install libpng jpeg doxygen coreutils

    - name: Configure Env Vars
      shell: bash
      run: |
        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}
        _TEMP_RAW="${{runner.temp}}"
        _TEMP=${_TEMP_RAW//\\//}

        # This is the trick GitHub Actions uses to allow us to set env vars across all subsequent job steps
        echo ::set-env name=BUILD_TYPE::"Release"
        echo ::set-env name=LLVM_INSTALL_DIR::"${_ROOT}/llvm"
        echo ::set-env name=LLVM_CONFIG::"${_ROOT}/llvm/bin/llvm-config"
        echo ::set-env name=HALIDE_SOURCE_DIR::"${_ROOT}/halide"
        echo ::set-env name=HALIDE_BUILD_DIR::"${_ROOT}/halide_build"
        echo ::set-env name=HALIDE_TEMP_DIR::"${_TEMP}"
        echo ::set-env name=PARALLEL_JOBS::"4"
        echo ::set-env name=PYBIND11_PATH::"${_ROOT}/pybind11"

    - name: Install Python Dependencies
      shell: bash
      run: |
        set -eux
        which python3
        python3 --version
        python3 -m pip --version
        which pip3
        pip3 --version
        pip install --upgrade pip
        pip install -r ${HALIDE_SOURCE_DIR}/python_bindings/requirements.txt
        pip list

    - name: Install PyBind
      shell: bash
      run: |
        git clone https://github.com/pybind/pybind11.git \
          "${PYBIND11_PATH}" \
          --branch v2.2 \
          --single-branch \
          --depth 1

    - name: Install LLVM
      shell: bash
      run: |
        set -eux

        LLVM_ID="llvm-${{matrix.llvm_version}}-${{matrix.arch}}-${{matrix.bits}}-${{matrix.halide_os}}"

        curl \
          --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} \
          --output ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz \
          https://buildbot.halide-lang.org/llvm/${LLVM_ID}.tgz

        TAR_FLAGS=
        if [[ ${{matrix.os}} == windows* ]]; then
          # Must use --force-local to avoid tar misinterpreting the : in
          # a Windows pathname as a hostname.
          TAR_FLAGS=" --force-local "
        fi

        mkdir ${LLVM_INSTALL_DIR}
        tar ${TAR_FLAGS} -xvf ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz -C ${LLVM_INSTALL_DIR}
        rm -rf ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz

        LLVM_COMMIT_HASH=`cat ${LLVM_INSTALL_DIR}/.halide_builder_llvm_commit`
        echo "Using LLVM v${{matrix.llvm_version}} commit=${LLVM_COMMIT_HASH}"

    - name: Configure Halide (Make)
      if: startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Configure Make
        mkdir ${HALIDE_BUILD_DIR}

    - name: Configure Halide (CMake)
      if: startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Configure CMake
        set -eux

        mkdir ${HALIDE_BUILD_DIR}

        CMAKE_GEN="Unix Makefiles"
        EXTRA_DEFS=

        if [[ ${{matrix.os}} == windows* ]]; then
          if [[ ${{matrix.bits}} == 64 ]]; then
            EXTRA_DEFS=" -T host=x64 -A x64 "
          else
            EXTRA_DEFS=" -T host=x64 "
          fi
          CMAKE_GEN="Visual Studio 16"
        fi

        if [[ ${{matrix.os}} == ubuntu* && ${{matrix.bits}} == 32 ]]; then
          EXTRA_DEFS="-D CMAKE_FIND_ROOT_PATH=/usr/lib/i386-linux-gnu -D CMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY"
        fi

        if [[ ${{matrix.os}} == macos* ]]; then
          EXTRA_DEFS="-D LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS=FORCE_OFF"
        fi

        if [[ ${{matrix.llvm_version}} == trunk ]]; then
          REQUIRE_LLVM_VERSION="110"
        else
          REQUIRE_LLVM_VERSION="${{matrix.llvm_version}}0"
        fi

        cmake \
          -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -D LLVM_DIR="${LLVM_INSTALL_DIR}/lib/cmake/llvm" \
          -D HALIDE_REQUIRE_LLVM_VERSION="${REQUIRE_LLVM_VERSION}" \
          -D HALIDE_SHARED_LIBRARY=${{matrix.shared_library}} \
          -G "${CMAKE_GEN}" \
          ${EXTRA_DEFS} \
          -S "${HALIDE_SOURCE_DIR}" \
          -B "${HALIDE_BUILD_DIR}"

    - name: Build Halide (Make)
      if: startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Build Halide
        cd ${HALIDE_BUILD_DIR}

        # TODO make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} distrib build_tests build_python_bindings build_apps
        make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} distrib build_python_bindings

    - name: Build Halide (CMake)
      if: startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Build Halide
        set -eux

        cd ${HALIDE_BUILD_DIR}
        # Omitting the --target flag implies "all/all_build"
        cmake \
          --build ${HALIDE_BUILD_DIR} \
          --config ${BUILD_TYPE} \
          -j ${PARALLEL_JOBS}

    - name: Run Tests (Make)
      if: startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Test Halide
        export TEST_TMPDIR="${HALIDE_TEMP_DIR}"
        cd ${HALIDE_BUILD_DIR}

        make -f ${HALIDE_SOURCE_DIR}/Makefile test_python

        TEST_GROUPS_PARALLEL="python internal correctness error warning generator apps"

        # tutorial has some performance measurements that can be flaky if we run them in parallel
        TEST_GROUPS_SERIAL="performance tutorial"

        # opengl won't work on the buildbots. auto_schedule is just flaky.
        TEST_GROUPS_BROKEN="opengl auto_schedule"

        make -f ${HALIDE_SOURCE_DIR}/Makefile tutorial_lesson_12_using_the_gpu

        # TODO Parallel
        # for t in ${TEST_GROUPS_PARALLEL}; do
        #   make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} test_${t}
        # done

        # TODO Serial
        # for t in ${TEST_GROUPS_SERIAL}; do
        #   make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} test_$t
        # done

    - name: Run Tests (CMake)
      if: startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Test Halide
        TEST_GROUPS_PARALLEL="internal|correctness|error|warning|generator"

        # tutorial has some performance measurements that can be flaky if we run them in parallel
        TEST_GROUPS_SERIAL="performance|tutorial"

        # opengl won't work on the buildbots. auto_schedule is just flaky.
        TEST_GROUPS_BROKEN="opengl|auto_schedule"

        export TEST_TMPDIR="${HALIDE_TEMP_DIR}"
        cd ${HALIDE_BUILD_DIR}

        # Parallel
        ctest \
          -j ${PARALLEL_JOBS} \
          -L "${TEST_GROUPS_PARALLEL}" \
          --output-on-failure

        # Serial
        ctest \
          -L "${TEST_GROUPS_SERIAL}" \
          --output-on-failure

